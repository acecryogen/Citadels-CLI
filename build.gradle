/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */
plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // id 'application' // Will be applied using the older method
    id 'jacoco'
}

apply plugin: 'application'

version = '1.0'
repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// Define the main class for the application plugin
mainClassName = 'citadels.App'

dependencies {
    // This dependency is used by the application.
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    // implementation 'com.google.guava:guava:28.0-jre'
    // implementation 'org.processing:core:3.3.7'
    // implementation 'org.reflections:reflections:0.10.2'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    
    // Launcher for JUnit Platform (might be needed for older Gradle to discover/run JUnit 5 tests)
    // testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.6.2' // Already have jupiter-engine
}

// application { // This block is removed
//    // Define the main class for the application
//    mainClassName = 'citadels.App'
// }

test {
    // Use junit platform for unit tests
    useJUnitPlatform() // Reinstated for gradle test
    ignoreFailures = true
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	archiveName = "citadels.jar" // Changed from archiveFileName
    manifest {
        attributes 'Main-Class': 'citadels.App'
    }
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

run { // Changed from tasks.named('run')
    standardInput = System.in
}
